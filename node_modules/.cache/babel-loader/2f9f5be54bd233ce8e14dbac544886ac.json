{"ast":null,"code":"import { ActionType } from '../action-types';\nimport { getMovies, getMoviesTrending } from '../../scripts/requests';\nexport const searchMovies = filtro => {\n  return async dispatch => {\n    dispatch({\n      type: ActionType.SEARCH_MOVIES\n    });\n\n    try {\n      if (filtro) {\n        let movies = await getMovies(filtro.genero, filtro.page, filtro.sort, filtro.pessoa, filtro.dataInicial, filtro.dataFinal, filtro.voteCount);\n        dispatch({\n          type: ActionType.SEARCH_MOVIES_SUCCESS,\n          payload: movies\n        });\n      } else {\n        let movies = await getMoviesTrending();\n        dispatch({\n          type: ActionType.SEARCH_MOVIES_SUCCESS,\n          payload: movies\n        });\n      }\n    } catch (err) {\n      dispatch({\n        type: ActionType.SEARCH_MOVIES_ERROR,\n        payload: err.message\n      });\n    }\n  };\n};","map":{"version":3,"names":["ActionType","getMovies","getMoviesTrending","searchMovies","filtro","dispatch","type","SEARCH_MOVIES","movies","genero","page","sort","pessoa","dataInicial","dataFinal","voteCount","SEARCH_MOVIES_SUCCESS","payload","err","SEARCH_MOVIES_ERROR","message"],"sources":["C:/Users/gusta/Desktop/Code/Movie Finder/moviefinder/src/state/action-creators/index.ts"],"sourcesContent":["import { Dispatch } from 'redux';\r\nimport { ActionType } from '../action-types';\r\nimport { Action } from '../actions';\r\nimport { getMovies, getMoviesTrending } from '../../scripts/requests';\r\nimport { IFilter } from '../../scripts/requests';\r\n\r\nexport const searchMovies = (filtro: IFilter | null) => {\r\n    return async (dispatch: Dispatch<Action>) => {\r\n        dispatch({\r\n            type: ActionType.SEARCH_MOVIES,\r\n        });\r\n\r\n        try {\r\n            if (filtro) {\r\n                let movies = await getMovies(\r\n                    filtro.genero,\r\n                    filtro.page,\r\n                    filtro.sort,\r\n                    filtro.pessoa,\r\n                    filtro.dataInicial,\r\n                    filtro.dataFinal,\r\n                    filtro.voteCount\r\n                );\r\n\r\n                dispatch({\r\n                    type: ActionType.SEARCH_MOVIES_SUCCESS,\r\n                    payload: movies,\r\n                });\r\n            } else {\r\n                let movies = await getMoviesTrending();\r\n\r\n                dispatch({\r\n                    type: ActionType.SEARCH_MOVIES_SUCCESS,\r\n                    payload: movies,\r\n                });\r\n            }\r\n        } catch (err: any) {\r\n            dispatch({\r\n                type: ActionType.SEARCH_MOVIES_ERROR,\r\n                payload: err.message,\r\n            });\r\n        }\r\n    };\r\n};\r\n"],"mappings":"AACA,SAASA,UAAT,QAA2B,iBAA3B;AAEA,SAASC,SAAT,EAAoBC,iBAApB,QAA6C,wBAA7C;AAGA,OAAO,MAAMC,YAAY,GAAIC,MAAD,IAA4B;EACpD,OAAO,MAAOC,QAAP,IAAsC;IACzCA,QAAQ,CAAC;MACLC,IAAI,EAAEN,UAAU,CAACO;IADZ,CAAD,CAAR;;IAIA,IAAI;MACA,IAAIH,MAAJ,EAAY;QACR,IAAII,MAAM,GAAG,MAAMP,SAAS,CACxBG,MAAM,CAACK,MADiB,EAExBL,MAAM,CAACM,IAFiB,EAGxBN,MAAM,CAACO,IAHiB,EAIxBP,MAAM,CAACQ,MAJiB,EAKxBR,MAAM,CAACS,WALiB,EAMxBT,MAAM,CAACU,SANiB,EAOxBV,MAAM,CAACW,SAPiB,CAA5B;QAUAV,QAAQ,CAAC;UACLC,IAAI,EAAEN,UAAU,CAACgB,qBADZ;UAELC,OAAO,EAAET;QAFJ,CAAD,CAAR;MAIH,CAfD,MAeO;QACH,IAAIA,MAAM,GAAG,MAAMN,iBAAiB,EAApC;QAEAG,QAAQ,CAAC;UACLC,IAAI,EAAEN,UAAU,CAACgB,qBADZ;UAELC,OAAO,EAAET;QAFJ,CAAD,CAAR;MAIH;IACJ,CAxBD,CAwBE,OAAOU,GAAP,EAAiB;MACfb,QAAQ,CAAC;QACLC,IAAI,EAAEN,UAAU,CAACmB,mBADZ;QAELF,OAAO,EAAEC,GAAG,CAACE;MAFR,CAAD,CAAR;IAIH;EACJ,CAnCD;AAoCH,CArCM"},"metadata":{},"sourceType":"module"}