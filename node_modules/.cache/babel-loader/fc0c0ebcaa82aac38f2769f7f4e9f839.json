{"ast":null,"code":"export const isNumber = str => {\n  if (typeof str !== \"string\") {\n    return false;\n  }\n\n  if (str.trim() === \"\") {\n    return false;\n  }\n\n  return !Number.isNaN(Number(str));\n};\nexport const formatDateStr = date => {\n  let datePart = date.match(/\\d+/g);\n  let year = \"\";\n  let month = \"\";\n  let day = \"\";\n\n  if (datePart) {\n    year = datePart[0];\n    month = datePart[1];\n    day = datePart[2];\n  }\n\n  return day + \"/\" + month + \"/\" + year;\n};\nexport const priceSplitter = number => {\n  return number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \".\");\n};\nexport const convertMinutes = totalMinutes => {\n  const hours = Math.floor(totalMinutes / 60);\n  const minutes = totalMinutes % 60;\n\n  if (hours === 0) {\n    return `${minutes}m`;\n  }\n\n  return `${hours}h e ${minutes}m`;\n};\n\nconst padTo2Digits = num => {\n  return num.toString().padStart(2, \"0\");\n};\n\nexport const formatDate = date => {\n  let d = new Date(date);\n  return [padTo2Digits(d.getDate()), padTo2Digits(d.getMonth() + 1), d.getFullYear()].join(\"/\");\n};\nexport const dataAAAAMMDD = date => {\n  return [date.getFullYear(), padTo2Digits(date.getMonth() + 1), padTo2Digits(date.getDate())].join(\"-\");\n};","map":{"version":3,"names":["isNumber","str","trim","Number","isNaN","formatDateStr","date","datePart","match","year","month","day","priceSplitter","number","toString","replace","convertMinutes","totalMinutes","hours","Math","floor","minutes","padTo2Digits","num","padStart","formatDate","d","Date","getDate","getMonth","getFullYear","join","dataAAAAMMDD"],"sources":["C:/Users/Gustavo/Desktop/Code/React/movieFinder/src/utils/helpers.ts"],"sourcesContent":["export const isNumber = (str: string): boolean => {\r\n    if (typeof str !== \"string\") {\r\n        return false;\r\n    }\r\n\r\n    if (str.trim() === \"\") {\r\n        return false;\r\n    }\r\n\r\n    return !Number.isNaN(Number(str));\r\n};\r\n\r\nexport const formatDateStr = (date: string) => {\r\n    let datePart: RegExpMatchArray | null = date.match(/\\d+/g);\r\n    let year = \"\";\r\n    let month = \"\";\r\n    let day = \"\";\r\n\r\n    if (datePart) {\r\n        year = datePart[0];\r\n        month = datePart[1];\r\n        day = datePart[2];\r\n    }\r\n\r\n    return day + \"/\" + month + \"/\" + year;\r\n};\r\n\r\nexport const priceSplitter = (number: number) => {\r\n    return number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \".\");\r\n};\r\n\r\nexport const convertMinutes = (totalMinutes: number): string => {\r\n    const hours = Math.floor(totalMinutes / 60);\r\n    const minutes = totalMinutes % 60;\r\n\r\n    if (hours === 0) {\r\n        return `${minutes}m`;\r\n    }\r\n\r\n    return `${hours}h e ${minutes}m`;\r\n};\r\n\r\nconst padTo2Digits = (num: number) => {\r\n    return num.toString().padStart(2, \"0\");\r\n};\r\n\r\nexport const formatDate = (date: Date) => {\r\n    let d = new Date(date);\r\n\r\n    return [\r\n        padTo2Digits(d.getDate()),\r\n        padTo2Digits(d.getMonth() + 1),\r\n        d.getFullYear(),\r\n    ].join(\"/\");\r\n};\r\n\r\nexport const dataAAAAMMDD = (date: Date) => {\r\n    return [\r\n        date.getFullYear(),\r\n        padTo2Digits(date.getMonth() + 1),\r\n        padTo2Digits(date.getDate()),\r\n    ].join(\"-\");\r\n};\r\n"],"mappings":"AAAA,OAAO,MAAMA,QAAQ,GAAIC,GAAD,IAA0B;EAC9C,IAAI,OAAOA,GAAP,KAAe,QAAnB,EAA6B;IACzB,OAAO,KAAP;EACH;;EAED,IAAIA,GAAG,CAACC,IAAJ,OAAe,EAAnB,EAAuB;IACnB,OAAO,KAAP;EACH;;EAED,OAAO,CAACC,MAAM,CAACC,KAAP,CAAaD,MAAM,CAACF,GAAD,CAAnB,CAAR;AACH,CAVM;AAYP,OAAO,MAAMI,aAAa,GAAIC,IAAD,IAAkB;EAC3C,IAAIC,QAAiC,GAAGD,IAAI,CAACE,KAAL,CAAW,MAAX,CAAxC;EACA,IAAIC,IAAI,GAAG,EAAX;EACA,IAAIC,KAAK,GAAG,EAAZ;EACA,IAAIC,GAAG,GAAG,EAAV;;EAEA,IAAIJ,QAAJ,EAAc;IACVE,IAAI,GAAGF,QAAQ,CAAC,CAAD,CAAf;IACAG,KAAK,GAAGH,QAAQ,CAAC,CAAD,CAAhB;IACAI,GAAG,GAAGJ,QAAQ,CAAC,CAAD,CAAd;EACH;;EAED,OAAOI,GAAG,GAAG,GAAN,GAAYD,KAAZ,GAAoB,GAApB,GAA0BD,IAAjC;AACH,CAbM;AAeP,OAAO,MAAMG,aAAa,GAAIC,MAAD,IAAoB;EAC7C,OAAOA,MAAM,CAACC,QAAP,GAAkBC,OAAlB,CAA0B,uBAA1B,EAAmD,GAAnD,CAAP;AACH,CAFM;AAIP,OAAO,MAAMC,cAAc,GAAIC,YAAD,IAAkC;EAC5D,MAAMC,KAAK,GAAGC,IAAI,CAACC,KAAL,CAAWH,YAAY,GAAG,EAA1B,CAAd;EACA,MAAMI,OAAO,GAAGJ,YAAY,GAAG,EAA/B;;EAEA,IAAIC,KAAK,KAAK,CAAd,EAAiB;IACb,OAAQ,GAAEG,OAAQ,GAAlB;EACH;;EAED,OAAQ,GAAEH,KAAM,OAAMG,OAAQ,GAA9B;AACH,CATM;;AAWP,MAAMC,YAAY,GAAIC,GAAD,IAAiB;EAClC,OAAOA,GAAG,CAACT,QAAJ,GAAeU,QAAf,CAAwB,CAAxB,EAA2B,GAA3B,CAAP;AACH,CAFD;;AAIA,OAAO,MAAMC,UAAU,GAAInB,IAAD,IAAgB;EACtC,IAAIoB,CAAC,GAAG,IAAIC,IAAJ,CAASrB,IAAT,CAAR;EAEA,OAAO,CACHgB,YAAY,CAACI,CAAC,CAACE,OAAF,EAAD,CADT,EAEHN,YAAY,CAACI,CAAC,CAACG,QAAF,KAAe,CAAhB,CAFT,EAGHH,CAAC,CAACI,WAAF,EAHG,EAILC,IAJK,CAIA,GAJA,CAAP;AAKH,CARM;AAUP,OAAO,MAAMC,YAAY,GAAI1B,IAAD,IAAgB;EACxC,OAAO,CACHA,IAAI,CAACwB,WAAL,EADG,EAEHR,YAAY,CAAChB,IAAI,CAACuB,QAAL,KAAkB,CAAnB,CAFT,EAGHP,YAAY,CAAChB,IAAI,CAACsB,OAAL,EAAD,CAHT,EAILG,IAJK,CAIA,GAJA,CAAP;AAKH,CANM"},"metadata":{},"sourceType":"module"}