{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gusta\\\\Desktop\\\\Code\\\\Movie Finder\\\\moviefinder\\\\src\\\\components\\\\movie-page.tsx\",\n    _s = $RefreshSig$();\n\nimport { useParams } from 'react-router-dom';\nimport { useState } from 'react';\nimport { getMovieDetails } from '../scripts/requests';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst MoviePage = () => {\n  _s();\n\n  const [movie, setMovie] = useState(null);\n  const {\n    movieID\n  } = useParams();\n\n  function isNumeric(str) {\n    if (typeof str != 'string') return false; // we only process strings!\n\n    return !isNaN(str) && // use type coercion to parse the _entirety_ of the string (`parseFloat` alone does not do this)...\n    !isNaN(parseFloat(str)); // ...and ensure strings of whitespace fail\n  }\n\n  const fetchMovieDetails = async () => {\n    if (movieID) setMovie(await getMovieDetails(movieID));\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: movieID\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n\n_s(MoviePage, \"qXZ9TVWOEx8IJZclnKjwOkJ3x3k=\", false, function () {\n  return [useParams];\n});\n\n_c = MoviePage;\nexport default MoviePage;\n\nvar _c;\n\n$RefreshReg$(_c, \"MoviePage\");","map":{"version":3,"names":["useParams","useState","getMovieDetails","MoviePage","movie","setMovie","movieID","isNumeric","str","isNaN","parseFloat","fetchMovieDetails"],"sources":["C:/Users/gusta/Desktop/Code/Movie Finder/moviefinder/src/components/movie-page.tsx"],"sourcesContent":["import { useParams } from 'react-router-dom';\r\nimport { useState } from 'react';\r\nimport { IMovie, getMovieDetails } from '../scripts/requests';\r\n\r\nconst MoviePage = () => {\r\n    const [movie, setMovie] = useState<IMovie | null>(null);\r\n    const { movieID } = useParams();\r\n\r\n    function isNumeric(str) {\r\n        if (typeof str != 'string') return false; // we only process strings!\r\n        return (\r\n            !isNaN(str) && // use type coercion to parse the _entirety_ of the string (`parseFloat` alone does not do this)...\r\n            !isNaN(parseFloat(str))\r\n        ); // ...and ensure strings of whitespace fail\r\n    }\r\n\r\n    const fetchMovieDetails = async () => {\r\n        if (movieID) setMovie(await getMovieDetails(movieID));\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <div>{movieID}</div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default MoviePage;\r\n"],"mappings":";;;AAAA,SAASA,SAAT,QAA0B,kBAA1B;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,SAAiBC,eAAjB,QAAwC,qBAAxC;;;;AAEA,MAAMC,SAAS,GAAG,MAAM;EAAA;;EACpB,MAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBJ,QAAQ,CAAgB,IAAhB,CAAlC;EACA,MAAM;IAAEK;EAAF,IAAcN,SAAS,EAA7B;;EAEA,SAASO,SAAT,CAAmBC,GAAnB,EAAwB;IACpB,IAAI,OAAOA,GAAP,IAAc,QAAlB,EAA4B,OAAO,KAAP,CADR,CACsB;;IAC1C,OACI,CAACC,KAAK,CAACD,GAAD,CAAN,IAAe;IACf,CAACC,KAAK,CAACC,UAAU,CAACF,GAAD,CAAX,CAFV,CAFoB,CAKjB;EACN;;EAED,MAAMG,iBAAiB,GAAG,YAAY;IAClC,IAAIL,OAAJ,EAAaD,QAAQ,CAAC,MAAMH,eAAe,CAACI,OAAD,CAAtB,CAAR;EAChB,CAFD;;EAIA,oBACI;IAAA,uBACI;MAAA,UAAMA;IAAN;MAAA;MAAA;MAAA;IAAA;EADJ,iBADJ;AAKH,CArBD;;GAAMH,S;UAEkBH,S;;;KAFlBG,S;AAuBN,eAAeA,SAAf"},"metadata":{},"sourceType":"module"}